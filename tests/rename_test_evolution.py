import src.evolution as evolution
import pytest


@pytest.fixture
def canvas_one():
    return


@pytest.fixture
def simulation():
    return evolution.Simulation()


def test_self():
    assert True


def test_init():
    sim = evolution.Simulation()


def test_drop_worst(simulation):
    assert len(simulation.canvases) == 16
    simulation.drop_worst()
    assert len(simulation.canvases) == 12
    simulation.drop_worst()
    assert len(simulation.canvases) == 8
    simulation.drop_worst()
    assert len(simulation.canvases) == 4
    simulation.drop_worst()
    assert len(simulation.canvases) == 0


def test_sort_canvases_by_score(simulation):
    assert len(simulation.canvases) == 16
    simulation.sort_canvases_by_score()
    assert len(simulation.canvases) == 16

    scores = [canvas.score() for canvas in simulation.canvases]
    for a, b in zip(scores, scores[1:]):
        assert a <= b


def test_mutate_code(simulation, canvas_one):
    mutated = simulation.mutate_code(canvas_one, 0)
    assert mutated == canvas_one

    for j in range(1, 20):
        mutated = simulation.mutate_code(canvas_one, j)
        assert mutated != canvas_one
        assert sum(a != b for a, b in zip(mutated, canvas_one)) == j
